package airacle.air.parser

import airacle.air.interpreter.*

internal val VALUES = ListValue(
    mutableListOf(
        TupleValue(
            arrayOf(
                StringValue.valueOf("zero"),
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("zero"),
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("one"),
                StringValue.valueOf("one"),
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("two"),
                TupleValue(
                    arrayOf(
                        StringValue.valueOf("zero"),
                    )
                ),
                TupleValue(
                    arrayOf(
                        StringValue.valueOf("one"),
                        StringValue.valueOf("one"),
                    )
                ),
            )
        ),

        TupleValue(
            arrayOf(
                UnitValue,
                UnitValue,
            )
        ),
        TupleValue(
            arrayOf(
                BoolValue.FALSE,
                BoolValue.FALSE,
                BoolValue.TRUE,
            )
        ),
        TupleValue(
            arrayOf(
                IntValue.valueOf(111.toBigInteger()),
                StringValue.valueOf("a"),
                StringValue.valueOf("b"),
                StringValue.valueOf("c"),
            )
        ),
        TupleValue(
            arrayOf(
                DecimalValue.valueOf("1.234".toBigDecimal()),
                StringValue.valueOf("a"),
                StringValue.valueOf("b"),
                StringValue.valueOf("c"),
                StringValue.valueOf("d"),
            )
        ),

        TupleValue(
            arrayOf(
                StringValue.valueOf("`"),
                StringValue.valueOf("`"),
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("~"),
                IntValue.ONE,
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("@"),
                DecimalValue.valueOf("1.2".toBigDecimal())
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("$"),
                TupleValue(
                    arrayOf(
                        StringValue.valueOf("a"),
                        StringValue.valueOf("b"),
                    )
                ),
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("%"),
                ListValue(
                    mutableListOf(
                        IntValue.ONE,
                        StringValue.valueOf("a"),
                    )
                )
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("^"),
                MapValue(
                    mutableMapOf(
                        IntValue.ONE to StringValue.valueOf("a"),
                    )
                )
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("&"),
                UnitValue
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("*"),
                BoolValue.FALSE,
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("?"),
                TupleValue(
                    arrayOf(
                        StringValue.valueOf("?"),
                        StringValue.valueOf("a"),
                        StringValue.valueOf("b"),
                    )
                ),
                StringValue.valueOf("c")
            )
        ),
        TupleValue(
            arrayOf(
                StringValue.valueOf("."),
                StringValue.valueOf("a"),
                TupleValue(
                    arrayOf(
                        StringValue.valueOf("."),
                        StringValue.valueOf("b"),
                        StringValue.valueOf("c"),
                    )
                ),
            )
        ),

        TupleValue(
            arrayOf(
                ListValue(
                    mutableListOf(
                        MapValue(
                            mutableMapOf(
                                ListValue(
                                    mutableListOf(
                                        TupleValue(
                                            arrayOf(
                                                MapValue(mutableMapOf())
                                            )
                                        )
                                    )
                                ) to TupleValue(
                                    arrayOf(
                                        ListValue(
                                            mutableListOf(
                                                MapValue(mutableMapOf())
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        ),
        ListValue(
            mutableListOf(
                ListValue(
                    mutableListOf(
                        TupleValue(arrayOf()),
                        MapValue(mutableMapOf()),
                        ListValue(mutableListOf()),
                    )
                ),
                MapValue(
                    mutableMapOf(
                        ListValue(mutableListOf()) to TupleValue(arrayOf()),
                        TupleValue(arrayOf()) to MapValue(mutableMapOf()),
                        MapValue(mutableMapOf()) to ListValue(mutableListOf()),
                    )
                ),
                TupleValue(
                    arrayOf(
                        TupleValue(arrayOf()),
                        ListValue(mutableListOf()),
                        MapValue(mutableMapOf()),
                    )
                )
            )
        ),

        TupleValue(
            arrayOf(
                StringValue.valueOf("a"),
                StringValue.valueOf("b"),
                StringValue.valueOf("c"),
            )
        ),
        ListValue(
            mutableListOf(
                StringValue.valueOf("a"),
                StringValue.valueOf("b"),
                StringValue.valueOf("c"),
            )
        ),
        MapValue(
            mutableMapOf(
                StringValue.valueOf("a") to StringValue.valueOf("b"),
                StringValue.valueOf("c") to StringValue.valueOf("d"),
                StringValue.valueOf("e") to StringValue.valueOf("f"),
                StringValue.valueOf("g") to StringValue.valueOf("h"),
            )
        )
    )
)